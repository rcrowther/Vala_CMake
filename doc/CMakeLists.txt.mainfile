#-----
# Init
#-----
cmake_minimum_required(VERSION 2.6)

# Add the CMake Vala package

# If the package was not placed directly into the project, alter this
# line to point at the folder containing the macros.
list(APPEND CMAKE_MODULE_PATH ${CMAKE_SOURCE_DIR}/Vala_CMake/vala)


# Include macros for Vala precompiling.
# Would only be altered if CMake_Vala changes it's directory
# structure.
include(FindValaBinding)
include(FindValaBindingLocations)
include(UseVala)



#--------------
# C Compiler
#--------------
# Replace the name with the name of your project. This should be done
# for every reference below, too.
project(projectName C)



#--------------
# Vala Compiler
#--------------
find_package(Vala 0.16 REQUIRED)



#--------------
# PkgConfig
#--------------
# Check these libraries have pkgconfg data. and usable versions. 
# The package is checked here, and so the library, but not the binding
# to Vala. That is checked later. The two different calls for the same
# library are needed because sometimes the binding does not match the
# library exactly. 

# This is a set of checks for a Gtk project. As an example of binding
# checks, this call has no mention of 'posix' or 'linux'. These are
# mappings made by Vala bindings, not libraries with pkg-config
# compile data.
find_package(PkgConfig)
pkg_search_module(GTK REQUIRED  gtk+-2.0 gtk+-3.0)

pkg_check_modules(GLIB REQUIRED glib-2.0)
pkg_check_modules(GOBJECT REQUIRED gobject-2.0)
pkg_check_modules(GIO REQUIRED gio-2.0)
pkg_check_modules(GIO_UNIX REQUIRED gio-unix-2.0)
pkg_check_modules(GTK REQUIRED gtk+-2.0)
pkg_check_modules(GTHREAD REQUIRED gthread-2.0)
pkg_check_modules(GEE REQUIRED gee-1.0)



#---------------
# Compiler Flags
#---------------
# Gather flags found by the pkg-config module into one variable CFLAGS.
# The pkg-module splits the returned flags into two variables,
# <PREFIX>_CFLAGS and <PREFIX>_CFLAGS_OTHER).
set(CFLAGS
  ${GLIB_CFLAGS} ${GLIB_CFLAGS_OTHER}
  ${GOBJECT_CFLAGS} ${GOBJECT_CFLAGS_OTHER}
  ${GIO_CFLAGS} ${GIO_CFLAGS_OTHER}
  ${GIO_UNIX_CFLAGS} ${GIO_UNIX_CFLAGS_OTHER}
  ${GTK_CFLAGS} ${GTK_CFLAGS_OTHER}
  ${GTHREAD_CFLAGS} ${GTHREAD_CFLAGS_OTHER}
  ${GEE_CFLAGS} ${GEE_CFLAGS_OTHER}
  )
# Use the list of flags when compiling any target for this target.
add_definitions(${CFLAGS})

# Gather library reference names found by the pkg-config module into
# one variable, LIB.
set(LIBS
  ${GLIB_LIBRARIES}
  ${GOBJECT_LIBRARIES}
  ${GIO_LIBRARIES}
  ${GIO_UNIX_LIBRARIES}
  ${GTK_LIBRARIES}
  ${GTHREAD_LIBRARIES}
  ${GEE_LIBRARIES}
  )
# Use the list of library names in compilation linking for this target.
link_libraries(${LIBS})

# Gather library paths found by the pkg-config module into one
# variable, LIB_PATHS.
set(LIB_PATHS
  ${GLIB_LIBRARIES_DIRS}
  ${GOBJECT_LIBRARY_DIRS}
  ${GIO_LIBRARY_DIRS}
  ${GIO_UNIX_LIBRARY_DIRS}
  ${GTK_LIBRARY_DIRS}
  ${GTHREAD_LIBRARY_DIRS}
  ${GEE_LIBRARY_DIRS}
  )
# deprecated. Can use target_link_libraries()?
link_directories(${LIB_PATHS})


#-----
# Gtk
#-----
# Here starts a complexity which, with editing, would work for any
# code which wishes to handle major libraries using preprocessor
# directives. In this section, we use the major version found by
# pkg-config. This is converted into a string which can be used later
# as a compiler flag.

# Set specific gtk major version
# The XXX_VERSION value is supplied by the PKG_CONFIG test.
### XXX_MAJOR_VERSION, XXX_MINOR_VERSION variables are
string(SUBSTRING ${GTK_VERSION} 0 1 GTK_MAJOR_VERSION)

# Be friendly, print out the version found
message(STATUS "GTK_MAJOR_VERSION: ${GTK_MAJOR_VERSION}")

# Find the version of the bindine and create a variable from which to
# construct flags.
# This data is useful for both pkg config, and vapi bindings.

# The form of Gtk flags has in the past been changed. To be sure, this
# code sets the form we need (rather than being clever and
# constructing the flag form using string replacement).
if (${GTK_MAJOR_VERSION} EQUAL 2)
  set(_gtk_binding "gtk+-2.0")
else (${GTK_MAJOR_VERSION} EQUAL 3)
  set(_gtk_binding "gtk+-3.0")
#else()
#message(ERROR "GTK_MAJOR_VERSION: ${GTK_MAJOR_VERSION}")
endif()

message(STATUS "_gtk_binding: ${_gtk_binding}")



#--------------------------
# Vala bindings
#--------------------------
# Find path locations, then files, of Vala bindings.

# As noted above, vala bindings may not be mapped directly to
# libraries. For example, This list includes bindings for 'posix' and
# 'linux', mappings made by Vala bindings which are part of GLib?. But
# the library gthread-2.0 is part of the glib-2.0 binding, so is not
# included here.
list(APPEND VALA_BINDINGS_LIST
   posix
   linux
   glib-2.0
   gobject-2.0
   gio-2.0
   gio-unix-2.0
   gtk+-2.0
   gee-1.0
   )

# Look for paths where bindings may exist.
# Depending on the parameters supplied, this looks in directories such
# as ... and the project/vapi folder.

# REQUIRED that some location is found, and namespace this set of
# locations as BINDINGS1.
vala_find_binding_locations(BINDINGS1
  # INCLUDE_GENERIC_SYSTEM_DIRECTORY
  INCLUDE_SYSTEM_DIRECTORY
  CUSTOM_BINDING_DIRECTORIES
    vapi
  REQUIRED
  )

# Check bindings exist in the locations found in BINDINGS1.
# This sets several variables, but the most interesting is
# BINDINGS1_VALA_BINDINGS_CFLAGS.
vala_check_binding(BINDINGS1
  REQUIRED
  ${VALA_BINDINGS_LIST}
  )


#--------------------------
# Supplied build interface
#--------------------------
# A place to add code for CMake's build interface.

# Check for Gtk version
# This will be used in vala precompilation, and documentation.
SET(GTK_VERSION_SYMBOL "GTK${GTK_MAJOR_VERSION}")

# Add variables which will appear as options in the interface.

# This variable will be used to switch internal debugging on and off,
# via preprocessing directives. It is supplied as a -D flag to the
# compile line.
option(PROJECT_DEBUG "Show internal debugging (reports send messages etc.)" off)

# A convenience, providing a CMake_Vala option hrough the build
# interface.
option(VALAC_QUIETER "Make Valac precompile quieter." off)



#------------------------
# Gather source locations
#------------------------
# Add every subdirectory containing a Vala_CMake.txt subdirectory file.

# Some examples are given. 
list(APPEND SUBFOLDER_SRCS
  #common
  #src
  )

# Add the subdirectory code to the VALA_SRCS variable
# Unless the gathering of sources is not done using the supplied
# subdirectory code, do not change this code.
foreach(subfolder ${SUBFOLDER_SRCS})
  add_subdirectory(${subfolder})
  list(APPEND VALA_SRCS ${VALA_SUB_SRCS})
endforeach(subfolder ${SUBFOLDER_SRCS})



#-----------------
# Vala precompile
#-----------------
# Add Valac flags.
# This variable was added as an option in the 'Supplied build
# interface' section. Now it is used to trigger a compile symbol, and
# presumably some preprocessing code, here.
if(PROJECT_DEBUG)
  vala_precompile_add_definitions("--define=PROJECT_DEBUG")
endif(PROJECT_DEBUG)

# Handle the libray version using the version symbol built above.
vala_precompile_add_definitions("D ${GTK_VERSION_SYMBOL}")


# Vala preprocessor definitions are added below.

# Change as you wish. Note that --quiet can be handled through CMake
# interface, and this code set an interface option above.
vala_precompile_add_definitions(
  "--disable-assert"
  "--enable-experimental"
  )

# Add all the binding flags to the Vala precompilation
vala_precompile_add_definitions(${BINDINGS1_VALA_BINDINGS_CFLAGS})

# ...and compile Vala code to c code.
vala_precompile(VALA_C
  ${VALA_SRCS}
  )



#-----------------
# C Compiling
#-----------------
# If the name of the executable should be changed ...?
add_executable(projectName ${VALA_C})

# This helps, as cmake may be confused by the mention of Vala
set_target_properties(projectName PROPERTIES LINKER_LANGUAGE C)

# Set some properties on the main target.
set_target_properties(projectName
  PROPERTIES
  # Uncomment this to put the executable in the main folder, rather
  # than the build folder
  #RUNTIME_OUTPUT_DIRECTORY ${CMAKE_SOURCE_DIR}
  )



#-----------------
# Documentation
#-----------------
include(UseValadoc)

# Valadoc needs and uses slightly different flags to valac. Please see
# documentation. The flag --enable-experimental is added here.
add_valadoc_target(BINDINGS1
  FLAGS
    -D ${GTK_VERSION_SYMBOL}
    --enable-experimental
  )



#-----------------
# Install
#-----------------
install(TARGETS 
  projectName
  RUNTIME
  CONFIGURATIONS
    Release
  DESTINATION
    bin
    )
